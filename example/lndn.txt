Language not deserving name ;)
==============================

A sample language, I've been developing for educational purposes.
We have programmable drawing space, we are drawing some shapes.

@@@
(use "../jslang.cl")
(use "lndn.cl")

(lndn-vm "list
  (map {x -> rotate (350,150) (x * 6) (350,250)}
         (seq 61))")
@@@

Available builtin functions:

@@@
(ul "`move point/shape vector` — move in space"
    "`rotate point/shape angle [base]` — rotate `point/shape` by `angle` (degrees) around `base` point. If shape, `base` is optional"
    "`map function list` — standard map function"
    "`seq limit` — return all non-negative integers smaller than `limit`")
@@@

Samples
=======

Circle
------

```
circle = center (radious > 0) -> {
    list (
        map {n -> rotate (center 1 + radious, center 2)
                         (n * 6)
                         center
              }
            (seq 61))
};

circle (340,220) 200
```

Spiral
------

```

point = x -> equal (length x) 2
           & x 1 : number
           & x 2 : number;

spiral = (center : point) (radious > 0) (density > 1/60) -> {
    d = 60 * density;
    dx = radious/d;

    list (
        map {n -> {
               x = center 1 + n * dx;
               rotate (x, center 2)
                      (n * 6)
                      center
            }}
            (seq d))
};

spiral (340,220) 200 30
```

Koch Snowflake
--------------

```
x = ((200,350),(500,350),(350,50),(200,350));

divide = seg n -> {
   dx = seg 2 1 - seg 1 1;
   dy = seg 2 2 - seg 1 2;
   stepx = dx / n;
   stepy = dy / n;
   map {i -> seg 1 1 + stepx * i, seg 1 2 + stepy * i}
     (seq (n + 1))
};

koch = seg -> {
    map {seg -> {
        base = divide seg 3;
        insert base 2 (rotate (base 3) (60) (base 2))
    }} (pairs seg)
};

list (repeat x {x -> join (koch x)} 4)
```

